<NerdContainer>
    <FluentTab Label="Advanced IO">
        <div class="verb-args-tab">
            <FluentStack Orientation="Orientation.Vertical" VerticalGap="16">

                <LabeledField Label="Override input data (list of files / wildcard patterns / .txt files)">
                    <FluentTextField Value="@(Parameters.InputData)" ValueChanged="@OnInputDataChanged" Immediate="true" />
                </LabeledField>

                <FluentCheckbox Value="@(Parameters.DoRecursive)" ValueChanged="@OnDoRecursiveChanged">
                    <label>Do recursive search</label>
                </FluentCheckbox>

                <LabeledField Label="Override input processing directory">
                    <FluentTextField Value="@(Parameters.InputProcessing)" ValueChanged="@OnInputProcessingChanged" Immediate="true" />
                </LabeledField>

                <LabeledField Label="Override output processing directory">
                    <FluentTextField Value="@(Parameters.OutputProcessing)" ValueChanged="@OnOutputProcessingChanged" Immediate="true" />
                </LabeledField>

                <FluentCheckbox Value="@(Parameters.NoRawData)" ValueChanged="@OnNoRawDataChanged">
                    <label>Don't expect raw data, only look for XML files in processing directory</label>
                </FluentCheckbox>

            </FluentStack>
        </div>
    </FluentTab>
</NerdContainer>

@code {
    [Parameter]
    public AdvancedIOTabParams Parameters { get; set; }
    [Parameter]
    public EventCallback<AdvancedIOTabParams> ParametersChanged { get; set; }

    private EventCallback<string> OnInputDataChanged => EventCallback.Factory.Create<string>(this, async (newValue) =>
    {
        Parameters.InputData = newValue;
        await ParametersChanged.InvokeAsync(Parameters);
    });

    private EventCallback<bool> OnDoRecursiveChanged => EventCallback.Factory.Create<bool>(this, async (newValue) =>
    {
        Parameters.DoRecursive = newValue;
        await ParametersChanged.InvokeAsync(Parameters);
    });

    private EventCallback<string> OnInputProcessingChanged => EventCallback.Factory.Create<string>(this, async (newValue) =>
    {
        Parameters.InputProcessing = newValue;
        await ParametersChanged.InvokeAsync(Parameters);
    });

    private EventCallback<string> OnOutputProcessingChanged => EventCallback.Factory.Create<string>(this, async (newValue) =>
    {
        Parameters.OutputProcessing = newValue;
        await ParametersChanged.InvokeAsync(Parameters);
    });

    private EventCallback<bool> OnNoRawDataChanged => EventCallback.Factory.Create<bool>(this, async (newValue) =>
    {
        Parameters.NoRawData = newValue;
        await ParametersChanged.InvokeAsync(Parameters);
    });
}