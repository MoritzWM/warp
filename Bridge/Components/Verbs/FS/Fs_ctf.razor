@using Bridge.Services
@inject ProjectSettingsService SettingsService

@page "/verbs/fs/ctf"

<VerbBase Title="Estimate CTF" ReferencePath="frame_series/#fs_ctf" @bind-SettingsFile=Params.Settings SettingsType="@(SettingsType)" ComposedCommand="@(CurrentCommand())">

    <ArgumentsContent>
        <FluentTabs Style="margin-bottom: 16px" Orientation="Orientation.Horizontal" Size="TabSize.Large">
            <div slot="end">
                <NerdSwitch />
            </div>

            <FluentTab Label="Optics">
                <div class="verb-args-tab">
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="16">

                        <LabeledField Label="Voltage">
                            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="4">
                                <FluentNumberField @bind-Value=Params.Voltage Step="1" Min="1" Max="9999999" Size="1" />
                                <span>kV</span>
                            </FluentStack>
                        </LabeledField>

                        <LabeledField Label="Spherical aberration">
                            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="4">
                                <FluentNumberField @bind-Value=Params.Cs Step="0.01" Min="0.01" Max="9999" Size="1" />
                                <span>mm</span>
                            </FluentStack>
                        </LabeledField>

                        <LabeledField Label="Amplitude contrast">
                            <FluentNumberField @bind-Value=Params.AmplitudeContrast Step="0.01" Min="0" Max="1" Size="1" />
                        </LabeledField>

                        <FluentCheckbox @bind-Value=Params.FitPhase><label>Phase plate</label></FluentCheckbox>

                    </FluentStack>
                </div>
            </FluentTab>

            <NerdContainer>
                <FluentTab Label="Fitting">
                    <div class="verb-args-tab">
                        <FluentStack Orientation="Orientation.Vertical" VerticalGap="16">

                            <LabeledField Label="Patch size in binned pixels">
                                <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="4">
                                    <FluentNumberField @bind-Value=Params.Window Step="128" Min="128" Max="2048" Size="1" />
                                    <span>px</span>
                                </FluentStack>
                            </LabeledField>

                            <LabeledField Label="Spatial frequencies considered for alignment">
                                <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="4">
                                    <FluentNumberField @bind-Value=Params.RangeMin Step="0.1" Min=@((Params.RangeMax + 0.1M).ToString()) Max="9999" Immediate="true" Size="1" />
                                    <span>—</span>
                                    <FluentNumberField @bind-Value=Params.RangeMax Step="0.1" Min="1" Max="@((Params.RangeMin - 0.1M).ToString())" Immediate="true" Size="1" />
                                    <span>Å</span>
                                </FluentStack>
                            </LabeledField>

                            <LabeledField Label="Defocus range to explore">
                                <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="4">
                                    <FluentNumberField @bind-Value=Params.DefocusMin Step="0.1" Max=@((Params.DefocusMax - 0.1M).ToString()) Min="-9999" Immediate="true" Size="1" />
                                    <span>—</span>
                                    <FluentNumberField @bind-Value=Params.DefocusMax Step="0.1" Max="9999" Min="@((Params.DefocusMin + 0.1M).ToString())" Immediate="true" Size="1" />
                                    <span>μm</span>
                                </FluentStack>
                            </LabeledField>

                            <FluentCheckbox @bind-Value=Params.UseSum><label>Use spectrum of frame average for fitting</label></FluentCheckbox>

                            <LabeledField Label="CTF model dimensions">
                                <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="0">
                                    <FluentRadioGroup @bind-Value=Params.GridMode Orientation="Orientation.Horizontal" Style="width: 162px">
                                        <FluentRadio Value="@("auto")">Auto</FluentRadio>
                                        <FluentRadio Value="@("manual")"></FluentRadio>
                                    </FluentRadioGroup>
                                    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="4">
                                        <FluentNumberField @bind-Value=Params.GridX Step="1" Min="1" Max="9999" Immediate="true" Size="1" Disabled="@(Params.GridMode != "manual")" />
                                        <span>×</span>
                                        <FluentNumberField @bind-Value=Params.GridY Step="1" Min="1" Max="9999" Immediate="true" Size="1" Disabled="@(Params.GridMode != "manual")" />

                                        @if (!(Params.GridX == 2 && Params.GridY == 2 && Params.UseSum && Params.GridMode == "manual"))
                                        {
                                            <FluentButton OnClick="@TiltMoviesClick">These are tilt movies</FluentButton>
                                        }
                                    </FluentStack>
                                </FluentStack>
                            </LabeledField>

                        </FluentStack>
                    </div>
                </FluentTab>
            </NerdContainer>

            <WorkDistributionTab @bind-Parameters=Params.WorkDistributionTabParams />

            <AdvancedIOTab @bind-Parameters=Params.AdvancedIOTabParams />

        </FluentTabs>
    </ArgumentsContent>

</VerbBase>

@code {
    [Inject]
    protected NerdyService NerdyService { get; set; }

    readonly SettingsType SettingsType = SettingsType.FrameSeries;
    readonly string VerbName = "wt_fs_ctf";
    VerbCommand Command = new("WarpTools fs_ctf");

    class CommandParams
    {
        public string Settings { get; set; } = "";

        public int Window { get; set; } = 512;

        public decimal RangeMin { get; set; } = 30;
        public decimal RangeMax { get; set; } = 4;

        public decimal DefocusMin { get; set; } = 0.5M;
        public decimal DefocusMax { get; set; } = 5;

        public int Voltage { get; set; } = 300;
        public decimal Cs { get; set; } = 2.7M;
        public decimal AmplitudeContrast { get; set; } = 0.07M;

        public bool FitPhase { get; set; } = false;
        public bool UseSum { get; set; } = false;

        public string GridMode { get; set; } = "auto";
        public int GridX { get; set; } = 1;
        public int GridY { get; set; } = 1;

        public WorkDistributionTabParams WorkDistributionTabParams { get; set; } = new();
        public AdvancedIOTabParams AdvancedIOTabParams { get; set; } = new();
    }
    CommandParams Params = new();

    VerbCommand CurrentCommand()
    {
        SettingsService.SaveVerbSettings(VerbName, Params);

        Command.Arguments.Clear();

        if (!string.IsNullOrWhiteSpace(Params.Settings))
            Command.AddArgument($"--settings {Params.Settings}");
        else
            Command.AddArgument($"--settings {SettingsService.GetSettingsName(SettingsType)}");

        if (Params.Window != 512)
            Command.AddArgument($"--window {Params.Window}");

        if (Params.RangeMin != 30)
            Command.AddArgument($"--range_min {Params.RangeMin}");
        if (Params.RangeMax != 4)
            Command.AddArgument($"--range_max {Params.RangeMax}");

        if (Params.DefocusMin != 0.5M)
            Command.AddArgument($"--defocus_min {Params.DefocusMin}");
        if (Params.DefocusMax != 5)
            Command.AddArgument($"--defocus_max {Params.DefocusMax}");

        if (Params.Voltage != 300)
            Command.AddArgument($"--voltage {Params.Voltage}");
        if (Params.Cs != 2.7M)
            Command.AddArgument($"--cs {Params.Cs}");
        if (Params.AmplitudeContrast != 0.07M)
            Command.AddArgument($"--amplitude {Params.AmplitudeContrast}");
        if (Params.FitPhase)
            Command.AddArgument("--fit_phase");
        if (Params.UseSum)
            Command.AddArgument("--use_sum");

        if (Params.GridMode == "manual")
            Command.AddArgument($"--grid {Params.GridX}x{Params.GridY}x1");

        Params.WorkDistributionTabParams.PopulateArguments(Command);

        Params.AdvancedIOTabParams.PopulateArguments(Command);

        return Command;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CommandParams Loaded = SettingsService.LoadVerbSettings<CommandParams>(VerbName);
        if (Loaded != null)
            Params = Loaded;
    }

    private async Task TiltMoviesClick()
    {
        Params.GridMode = "manual";
        Params.GridX = 2;
        Params.GridY = 2;
        Params.UseSum = true;
    }
}
