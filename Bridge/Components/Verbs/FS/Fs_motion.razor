@using Bridge.Services
@inject ProjectSettingsService SettingsService

@page "/verbs/fs/motion"

<VerbBase Title="Correct motion" ReferencePath="frame_series/#fs_motion" @bind-SettingsFile=Params.Settings SettingsType="@(SettingsType)" ComposedCommand="@(CurrentCommand())">

    <ArgumentsContent>
        <FluentTabs Style="margin-bottom: 16px" Orientation="Orientation.Horizontal" Size="TabSize.Large">
            <div slot="end">
                <NerdSwitch />
            </div>

            <FluentTab Label="Output">
                <div class="verb-args-tab">
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="16">

                        <FluentCheckbox @bind-Value=Params.OutAverage Immediate="true"><label>Export aligned averages</label></FluentCheckbox>

                        <FluentCheckbox @bind-Value=Params.OutHalves Immediate="true"><label>Export aligned half-averages for denoiser training</label></FluentCheckbox>

                        <NerdContainer>
                            <LabeledField Label="Skip first N frames">
                                <FluentNumberField @bind-Value=Params.SkipFirst Step="1" Min="0" Max="9999" Immediate="true" Size="1" />
                            </LabeledField>

                            <LabeledField Label="Skip last N frames">
                                <FluentNumberField @bind-Value=Params.SkipLast Step="1" Min="0" Max="9999" Immediate="true" Size="1" />
                            </LabeledField>
                        </NerdContainer>

                    </FluentStack>
                </div>
            </FluentTab>

            <NerdContainer>
                <FluentTab Label="Fitting">
                    <div class="verb-args-tab">
                        <FluentStack Orientation="Orientation.Vertical" VerticalGap="16">

                            <LabeledField Label="Spatial frequencies considered for alignment">
                                <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="4">
                                    <FluentNumberField @bind-Value=Params.RangeMin Step="0.1" Min=@((Params.RangeMax + 0.1M).ToString()) Max="9999" Immediate="true" Size="1" />
                                    <span>—</span>
                                    <FluentNumberField @bind-Value=Params.RangeMax Step="0.1" Min="1" Max="@((Params.RangeMin - 0.1M).ToString())" Immediate="true" Size="1" />
                                    <span>Å</span>
                                </FluentStack>
                            </LabeledField>

                            <LabeledField Label="B-factor for downweighting higher spatial frequencies">
                                <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="4">
                                    <FluentNumberField @bind-Value=Params.BFactor Step="10" Min="-100000" Max="0" Size="1" />
                                    <span>Å²</span>
                                </FluentStack>
                            </LabeledField>

                            <LabeledField Label="Motion model dimensions">
                                <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="0">
                                    <FluentRadioGroup @bind-Value=Params.GridMode Orientation="Orientation.Horizontal" Style="width: 160px">
                                        <FluentRadio Value="@("auto")">Auto</FluentRadio>
                                        <FluentRadio Value="@("manual")"></FluentRadio>
                                    </FluentRadioGroup>
                                    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="4">
                                        <FluentNumberField @bind-Value=Params.GridX Step="1" Min="1" Max="9999" Immediate="true" Size="1" Disabled="@(Params.GridMode != "manual")" />
                                        <span>×</span>
                                        <FluentNumberField @bind-Value=Params.GridY Step="1" Min="1" Max="9999" Immediate="true" Size="1" Disabled="@(Params.GridMode != "manual")" />
                                        <span>×</span>
                                        <FluentNumberField @bind-Value=Params.GridZ Step="1" Min="1" Max="9999" Immediate="true" Size="1" Disabled="@(Params.GridMode != "manual")" />
                                    </FluentStack>
                                </FluentStack>
                            </LabeledField>
                        </FluentStack>
                    </div>
                </FluentTab>
            </NerdContainer>

            <WorkDistributionTab @bind-Parameters=Params.WorkDistributionTabParams />

            <AdvancedIOTab @bind-Parameters=Params.AdvancedIOTabParams />

        </FluentTabs>
    </ArgumentsContent>

</VerbBase>

@code {
    [Inject]
    protected NerdyService NerdyService { get; set; }

    readonly SettingsType SettingsType = SettingsType.FrameSeries;
    readonly string VerbName = "wt_fs_motion";
    VerbCommand Command = new("WarpTools fs_motion");

    class CommandParams
    {
        public string Settings { get; set; } = "";

        public decimal RangeMin { get; set; } = 500;
        public decimal RangeMax { get; set; } = 10;

        public int BFactor { get; set; } = -500;

        public string GridMode { get; set; } = "auto";
        public int GridX { get; set; } = 1;
        public int GridY { get; set; } = 1;
        public int GridZ { get; set; } = 1;

        public bool OutAverage { get; set; } = true;
        public bool OutHalves { get; set; } = false;

        public int SkipFirst { get; set; } = 0;
        public int SkipLast { get; set; } = 0;

        public WorkDistributionTabParams WorkDistributionTabParams { get; set; } = new();
        public AdvancedIOTabParams AdvancedIOTabParams { get; set; } = new();
    }
    CommandParams Params = new();

    VerbCommand CurrentCommand()
    {
        SettingsService.SaveVerbSettings(VerbName, Params);

        Command.Arguments.Clear();

        if (!string.IsNullOrWhiteSpace(Params.Settings))
            Command.AddArgument($"--settings {Params.Settings}");
        else
            Command.AddArgument($"--settings {SettingsService.GetSettingsName(SettingsType)}");

        if (Params.RangeMin != 500)
            Command.AddArgument($"--range_min {Params.RangeMin}");
        if (Params.RangeMax != 10)
            Command.AddArgument($"--range_max {Params.RangeMax}");
        if (Params.BFactor != -500)
            Command.AddArgument($"--bfac {Params.BFactor}");

        if (Params.GridMode == "manual")
            Command.AddArgument($"--grid {Params.GridX}x{Params.GridY}x{Params.GridZ}");

        if (Params.OutAverage)
            Command.AddArgument("--averages");
        if (Params.OutHalves)
            Command.AddArgument("--average_halves");

        if (Params.SkipFirst > 0)
            Command.AddArgument($"--skip_first {Params.SkipFirst}");
        if (Params.SkipLast > 0)
            Command.AddArgument($"--skip_last {Params.SkipLast}");

        Params.WorkDistributionTabParams.PopulateArguments(Command);

        Params.AdvancedIOTabParams.PopulateArguments(Command);

        return Command;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CommandParams Loaded = SettingsService.LoadVerbSettings<CommandParams>(VerbName);
        if (Loaded != null)
            Params = Loaded;
    }
}
