@using Bridge.Services
@using System.Text
@inject ProjectSettingsService SettingsService

@page "/verbs/general/filter_quality"

<VerbBase Title="Print histograms and filter items by quality" ReferencePath="general/#filter_quality" @bind-SettingsFile=Params.Settings SettingsType="@(SettingsType)" ComposedCommand="@(CurrentCommand())" ValidationMessage="@(CurrentErrors())">

    <ArgumentsContent>
        <FluentTabs Style="margin-bottom: 16px" Orientation="Orientation.Horizontal" Size="TabSize.Large">
            <div slot="end">
                <NerdSwitch />
            </div>

            <FluentTab Label="Output">
                <div class="verb-args-tab">
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="16">

                        <FluentRadioGroup @bind-Value=Params.OutputMode Orientation="Orientation.Vertical">
                            <FluentRadio Value="@("histograms")"><label>Only print histograms and exit</label></FluentRadio>
                            <FluentRadio Value="@("filelist")">
                                <ErrorField IsError="@(Params.OutputMode == "filelist" && string.IsNullOrWhiteSpace(Params.OutputPath))" Message="Value required">
                                    <LabeledField Label="Path to .txt file that will contain items passing the filter criteria">
                                        <FluentTextField @bind-Value=Params.OutputPath Required="true" Immediate="true" />
                                    </LabeledField>
                                </ErrorField>
                            </FluentRadio>
                        </FluentRadioGroup>

                    </FluentStack>
                </div>
            </FluentTab>

            <FluentTab Label="CTF">
                <div class="verb-args-tab">
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="16">

                        <ErrorField IsError="@(!Params.DefocusMin.HasValue && Params.DefocusMax.HasValue)" Message="Minimum value required when maximum is specified">
                            <LabeledField Label="Defocus">
                                <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="4">
                                    <FluentNumberField @bind-Value=Params.DefocusMin Step="0.1" Immediate="true" Size="1" />
                                    <span>—</span>
                                    <FluentNumberField @bind-Value=Params.DefocusMax Step="0.1" Immediate="true" Size="1" />
                                    <span>μm</span>
                                </FluentStack>
                            </LabeledField>
                        </ErrorField>

                        <ErrorField IsError="@(!Params.AstigmatismMin.HasValue && Params.AstigmatismMax.HasValue)" Message="Minimum value required when maximum is specified">
                            <LabeledField Label="Astigmatism deviation from mean">
                                <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="4">
                                    <FluentNumberField @bind-Value=Params.AstigmatismMin Step="0.1" Min="0.0" Immediate="true" Size="1" />
                                    <span>—</span>
                                    <FluentNumberField @bind-Value=Params.AstigmatismMax Step="0.1" Min="0.0" Immediate="true" Size="1" />
                                    <span>σ</span>
                                </FluentStack>
                            </LabeledField>
                        </ErrorField>

                        <ErrorField IsError="@(!Params.PhaseMin.HasValue && Params.PhaseMax.HasValue)" Message="Minimum value required when maximum is specified">
                            <LabeledField Label="Phase shift">
                                <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="4">
                                    <FluentNumberField @bind-Value=Params.PhaseMin Step="0.1" Min="0.0" Max="1.0" Immediate="true" Size="1" />
                                    <span>—</span>
                                    <FluentNumberField @bind-Value=Params.PhaseMax Step="0.1" Min="0.0" Max="1.0" Immediate="true" Size="1" />
                                    <span>π</span>
                                </FluentStack>
                            </LabeledField>
                        </ErrorField>

                        <ErrorField IsError="@(!Params.ResolutionMin.HasValue && Params.ResolutionMax.HasValue)" Message="Minimum value required when maximum is specified">
                            <LabeledField Label="CTF fit resolution">
                                <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="4">
                                    <FluentNumberField @bind-Value=Params.ResolutionMin Step="0.1" Min="0.0" Immediate="true" Size="1" />
                                    <span>—</span>
                                    <FluentNumberField @bind-Value=Params.ResolutionMax Step="0.1" Min="0.0" Immediate="true" Size="1" />
                                    <span>Å</span>
                                </FluentStack>
                            </LabeledField>
                        </ErrorField>

                    </FluentStack>
                </div>
            </FluentTab>

            <FluentTab Label="Motion">
                <div class="verb-args-tab">
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="16">

                        <ErrorField IsError="@(!Params.MotionMin.HasValue && Params.MotionMax.HasValue)" Message="Minimum value required when maximum is specified">
                            <LabeledField Label="Motion in first 1/3 of frames">
                                <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="4">
                                    <FluentNumberField @bind-Value=Params.MotionMin Step="0.1" Min="0.0" Immediate="true" Size="1" />
                                    <span>—</span>
                                    <FluentNumberField @bind-Value=Params.MotionMax Step="0.1" Min="0.0" Immediate="true" Size="1" />
                                    <span>Å</span>
                                </FluentStack>
                            </LabeledField>
                        </ErrorField>

                    </FluentStack>
                </div>
            </FluentTab>

            <FluentTab Label="Image contents">
                <div class="verb-args-tab">
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="16">

                        <ErrorField IsError="@(!Params.CrapMin.HasValue && Params.CrapMax.HasValue)" Message="Minimum value required when maximum is specified">
                            <LabeledField Label="Percentage of masked area">
                                <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="4">
                                    <FluentNumberField @bind-Value=Params.CrapMin Step="1" Min="0" Max="100" Immediate="true" Size="1" />
                                    <span>—</span>
                                    <FluentNumberField @bind-Value=Params.CrapMax Step="1" Min="0" Max="100" Immediate="true" Size="1" />
                                    <span>%</span>
                                </FluentStack>
                            </LabeledField>
                        </ErrorField>

                        <ErrorField IsError="@(!Params.ParticlesMin.HasValue && Params.ParticlesMax.HasValue)" Message="Minimum value required when maximum is specified">
                            <LabeledField Label="Number of picked particles">
                                <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="4">
                                    <FluentNumberField @bind-Value=Params.ParticlesMin Step="1" Min="0" Immediate="true" Size="1" />
                                    <span>—</span>
                                    <FluentNumberField @bind-Value=Params.ParticlesMax Step="1" Min="0" Immediate="true" Size="1" />
                                </FluentStack>
                            </LabeledField>
                        </ErrorField>

                        <ErrorField IsError="@(Params.ParticlesMin.HasValue && string.IsNullOrWhiteSpace(Params.ParticlesStar))" Message="Value required">
                            <LabeledField Label="Path to STAR file with particles, or wildcard pattern matching multiple STAR files">
                                <FluentTextField @bind-Value=Params.ParticlesStar Required="true" Immediate="true" />
                            </LabeledField>
                        </ErrorField>

                    </FluentStack>
                </div>
            </FluentTab>

            <FluentTab Label="Tilts">
                <div class="verb-args-tab">
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="16">

                        <ErrorField IsError="@(!Params.NTiltsMin.HasValue && Params.NTiltsMax.HasValue)" Message="Minimum value required when maximum is specified">
                            <LabeledField Label="Number of tilts">
                                <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="4">
                                    <FluentNumberField @bind-Value=Params.NTiltsMin Step="1" Min="0" Immediate="true" Size="1" />
                                    <span>—</span>
                                    <FluentNumberField @bind-Value=Params.NTiltsMax Step="1" Min="0" Immediate="true" Size="1" />
                                </FluentStack>
                            </LabeledField>
                        </ErrorField>

                    </FluentStack>
                </div>
            </FluentTab>

            <AdvancedIOTab @bind-Parameters=Params.AdvancedIOTabParams />

        </FluentTabs>
    </ArgumentsContent>

</VerbBase>

@code {
    [Inject]
    protected NerdyService NerdyService { get; set; }

    readonly SettingsType SettingsType = SettingsType.Undefined;
    readonly string VerbName = "wt_filter_quality";
    VerbCommand Command = new("WarpTools filter_quality");

    class CommandParams
    {
        public string Settings { get; set; } = "";

        public string OutputMode { get; set; } = "histograms";
        public string OutputPath { get; set; } = "";

        #region CTF

        public decimal? DefocusMin { get; set; }
        public decimal? DefocusMax { get; set; }

        public decimal? AstigmatismMin { get; set; }
        public decimal? AstigmatismMax { get; set; }

        public decimal? PhaseMin { get; set; }
        public decimal? PhaseMax { get; set; }

        public decimal? ResolutionMin { get; set; }
        public decimal? ResolutionMax { get; set; }

        #endregion

        #region Motion

        public decimal? MotionMin { get; set; }
        public decimal? MotionMax { get; set; }

        #endregion

        #region Image contents

        public int? CrapMin { get; set; }
        public int? CrapMax { get; set; }

        public int? ParticlesMin { get; set; }
        public int? ParticlesMax { get; set; }

        public string ParticlesStar { get; set; } = "";

        #endregion

        #region Tilts

        public int? NTiltsMin { get; set; }
        public int? NTiltsMax { get; set; }

        #endregion

        public AdvancedIOTabParams AdvancedIOTabParams { get; set; } = new();
    }
    CommandParams Params = new();

    VerbCommand CurrentCommand()
    {
        SettingsService.SaveVerbSettings(VerbName, Params);

        Command.Arguments.Clear();

        if (!string.IsNullOrWhiteSpace(Params.Settings))
            Command.AddArgument($"--settings {Params.Settings}");

        if (Params.OutputMode == "histograms")
            Command.AddArgument("--histograms");
        else if (!string.IsNullOrWhiteSpace(Params.OutputPath))
            Command.AddArgument($"--output {Params.OutputPath}");

        if (Params.DefocusMin.HasValue)
            if (Params.DefocusMax.HasValue)
                Command.AddArgument($"--defocus {Params.DefocusMin.Value} {Params.DefocusMax.Value}");
            else
                Command.AddArgument($"--defocus {Params.DefocusMin.Value}");

        if (Params.AstigmatismMin.HasValue)
            if (Params.AstigmatismMax.HasValue)
                Command.AddArgument($"--astigmatism {Params.AstigmatismMin.Value} {Params.AstigmatismMax.Value}");
            else
                Command.AddArgument($"--astigmatism {Params.AstigmatismMin.Value}");

        if (Params.PhaseMin.HasValue)
            if (Params.PhaseMax.HasValue)
                Command.AddArgument($"--phase {Params.PhaseMin.Value} {Params.PhaseMax.Value}");
            else
                Command.AddArgument($"--phase {Params.PhaseMin.Value}");

        if (Params.ResolutionMin.HasValue)
            if (Params.ResolutionMax.HasValue)
                Command.AddArgument($"--resolution {Params.ResolutionMin.Value} {Params.ResolutionMax.Value}");
            else
                Command.AddArgument($"--resolution {Params.ResolutionMin.Value}");

        if (Params.MotionMin.HasValue)
            if (Params.MotionMax.HasValue)
                Command.AddArgument($"--motion {Params.MotionMin.Value} {Params.MotionMax.Value}");
            else
                Command.AddArgument($"--motion {Params.MotionMin.Value}");

        if (Params.CrapMin.HasValue)
            if (Params.CrapMax.HasValue)
                Command.AddArgument($"--crap {Params.CrapMin.Value} {Params.CrapMax.Value}");
            else
                Command.AddArgument($"--crap {Params.CrapMin.Value}");

        if (Params.ParticlesMin.HasValue && !string.IsNullOrWhiteSpace(Params.ParticlesStar))
        {
            if (Params.ParticlesMax.HasValue)
                Command.AddArgument($"--particles {Params.ParticlesMin.Value} {Params.ParticlesMax.Value}");
            else
                Command.AddArgument($"--particles {Params.ParticlesMin.Value}");

            Command.AddArgument($"--particles_star {Params.ParticlesStar}");
        }

        if (Params.NTiltsMin.HasValue)
            if (Params.NTiltsMax.HasValue)
                Command.AddArgument($"--ntilts {Params.NTiltsMin.Value} {Params.NTiltsMax.Value}");
            else
                Command.AddArgument($"--ntilts {Params.NTiltsMin.Value}");

        Params.AdvancedIOTabParams.PopulateArguments(Command);

        return Command;
    }

    string CurrentErrors()
    {
        StringBuilder Errors = new();

        if (string.IsNullOrWhiteSpace(Params.Settings))
            Errors.AppendLine("--settings must have a value");

        if (Params.OutputMode == "filelist" && string.IsNullOrWhiteSpace(Params.OutputPath))
            Errors.AppendLine("--output must have a value");

        if (!Params.DefocusMin.HasValue && Params.DefocusMax.HasValue)
            Errors.AppendLine("--defocus minimum value required when maximum is specified");
        if (Params.DefocusMin.HasValue && Params.DefocusMax.HasValue && Params.DefocusMin.Value >= Params.DefocusMax.Value)
            Errors.AppendLine("--defocus minimum must be less than maximum");

        if (!Params.AstigmatismMin.HasValue && Params.AstigmatismMax.HasValue)
            Errors.AppendLine("--astigmatism minimum value required when maximum is specified");
        if (Params.AstigmatismMin.HasValue && Params.AstigmatismMax.HasValue && Params.AstigmatismMin.Value >= Params.AstigmatismMax.Value)
            Errors.AppendLine("--astigmatism minimum must be less than maximum");

        if (!Params.PhaseMin.HasValue && Params.PhaseMax.HasValue)
            Errors.AppendLine("--phase minimum value required when maximum is specified");
        if (Params.PhaseMin.HasValue && Params.PhaseMax.HasValue && Params.PhaseMin.Value >= Params.PhaseMax.Value)
            Errors.AppendLine("--phase minimum must be less than maximum");

        if (!Params.ResolutionMin.HasValue && Params.ResolutionMax.HasValue)
            Errors.AppendLine("--resolution minimum value required when maximum is specified");
        if (Params.ResolutionMin.HasValue && Params.ResolutionMax.HasValue && Params.ResolutionMin.Value >= Params.ResolutionMax.Value)
            Errors.AppendLine("--resolution minimum must be less than maximum");

        if (!Params.MotionMin.HasValue && Params.MotionMax.HasValue)
            Errors.AppendLine("--motion minimum value required when maximum is specified");
        if (Params.MotionMin.HasValue && Params.MotionMax.HasValue && Params.MotionMin.Value >= Params.MotionMax.Value)
            Errors.AppendLine("--motion minimum must be less than maximum");

        if (!Params.CrapMin.HasValue && Params.CrapMax.HasValue)
            Errors.AppendLine("--crap minimum value required when maximum is specified");
        if (Params.CrapMin.HasValue && Params.CrapMax.HasValue && Params.CrapMin.Value >= Params.CrapMax.Value)
            Errors.AppendLine("--crap minimum must be less than maximum");

        if (!Params.ParticlesMin.HasValue && Params.ParticlesMax.HasValue)
            Errors.AppendLine("--particles minimum value required when maximum is specified");
        if (Params.ParticlesMin.HasValue && Params.ParticlesMax.HasValue && Params.ParticlesMin.Value >= Params.ParticlesMax.Value)
            Errors.AppendLine("--particles minimum must be less than maximum");

        if (Params.ParticlesMin.HasValue && string.IsNullOrWhiteSpace(Params.ParticlesStar))
            Errors.AppendLine("--particles_star must have a value");

        return Errors.ToString();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CommandParams Loaded = SettingsService.LoadVerbSettings<CommandParams>(VerbName);
        if (Loaded != null)
            Params = Loaded;
    }
}
