@using Bridge.Services
@using System.Text
@inject ProjectSettingsService SettingsService

@page "/verbs/general/move_data"

<VerbBase Title="Move data" ReferencePath="general/#move_data" @bind-SettingsFile=Params.Settings SettingsType="@(SettingsType)" ComposedCommand="@(CurrentCommand())" ValidationMessage="@(CurrentErrors())">

    <ArgumentsContent>
        <FluentTabs Style="margin-bottom: 16px" Orientation="Orientation.Horizontal" Size="TabSize.Large">
            <div slot="end">
                <NerdSwitch />
            </div>

            <FluentTab Label="Settings">
                <div class="verb-args-tab">
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="16">

                        <ErrorField IsError="@(string.IsNullOrWhiteSpace(Params.NewLocation))" Message="Value required">
                            <LabeledField Label="New directory containing raw data (top directory if searching recursively)">
                                <FluentTextField @bind-Value=Params.NewLocation Required="true" Immediate="true" Size="100" />
                            </LabeledField>
                        </ErrorField>
                        
                        <ErrorField IsError="@(string.IsNullOrWhiteSpace(Params.NewSettings))" Message="Value required">
                            <LabeledField Label="New .settings file">
                                <FluentTextField @bind-Value=Params.NewSettings Required="true" Immediate="true" />
                            </LabeledField>
                        </ErrorField>

                    </FluentStack>
                </div>
            </FluentTab>

            <AdvancedIOTab @bind-Parameters=Params.AdvancedIOTabParams />

        </FluentTabs>
    </ArgumentsContent>

</VerbBase>

@code {
    [Inject]
    protected NerdyService NerdyService { get; set; }

    readonly SettingsType SettingsType = SettingsType.Undefined;
    readonly string VerbName = "wt_move_data";
    VerbCommand Command = new("WarpTools move_data");

    class CommandParams
    {
        public string Settings { get; set; } = "";

        public string NewLocation { get; set; } = "";
        public string NewSettings { get; set; } = "";

        public AdvancedIOTabParams AdvancedIOTabParams { get; set; } = new();
    }
    CommandParams Params = new();

    VerbCommand CurrentCommand()
    {
        SettingsService.SaveVerbSettings(VerbName, Params);

        Command.Arguments.Clear();

        if (!string.IsNullOrWhiteSpace(Params.Settings))
            Command.AddArgument($"--settings {Params.Settings}");

        if (!string.IsNullOrWhiteSpace(Params.NewLocation))
            Command.AddArgument($"--to {Params.NewLocation}");

        if (!string.IsNullOrWhiteSpace(Params.NewSettings))
            Command.AddArgument($"--new_settings {Params.NewSettings}");

        Params.AdvancedIOTabParams.PopulateArguments(Command);

        return Command;
    }

    string CurrentErrors()
    {
        StringBuilder Errors = new();

        if (string.IsNullOrWhiteSpace(Params.Settings))
            Errors.AppendLine("--settings must have a value");

        if (string.IsNullOrWhiteSpace(Params.NewLocation))
            Errors.AppendLine("--to must have a value");

        if (string.IsNullOrWhiteSpace(Params.NewSettings))
            Errors.AppendLine("--new_settings must have a value");

        return Errors.ToString();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CommandParams Loaded = SettingsService.LoadVerbSettings<CommandParams>(VerbName);
        if (Loaded != null)
            Params = Loaded;
    }
}
