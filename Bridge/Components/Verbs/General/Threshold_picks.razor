@using Bridge.Services
@using System.Text
@inject ProjectSettingsService SettingsService

@page "/verbs/general/threshold_picks"

<VerbBase Title="Threshold particle picks" ReferencePath="general/#threshold_picks" @bind-SettingsFile=Params.Settings SettingsType="@(SettingsType)" ComposedCommand="@(CurrentCommand())" ValidationMessage="@(CurrentErrors())">

    <ArgumentsContent>
        <FluentTabs Style="margin-bottom: 16px" Orientation="Orientation.Horizontal" Size="TabSize.Large">
            <div slot="end">
                <NerdSwitch />
            </div>

            <FluentTab Label="IO">
                <div class="verb-args-tab">
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="16">

                        <ErrorField IsError="@(string.IsNullOrWhiteSpace(Params.InSuffix))" Message="Value required">
                            <LabeledField Label="Suffix for input STAR file names ({item_name}_{--in_suffix}.star)">
                                <FluentTextField @bind-Value=Params.InSuffix Required="true" Immediate="true" />
                            </LabeledField>
                        </ErrorField>

                        <ErrorField IsError="@(string.IsNullOrWhiteSpace(Params.OutSuffix))" Message="Value required">
                            <LabeledField Label="Suffix to add to output STAR file names ({item_name}_{--in_suffix}_{--out_suffix}.star)">
                                <FluentTextField @bind-Value=Params.OutSuffix Required="true" Immediate="true" />
                            </LabeledField>
                        </ErrorField>

                        <LabeledField Label="Combine all results into this single STAR file">
                            <FluentTextField @bind-Value=Params.OutCombined Immediate="true" />
                        </LabeledField>

                    </FluentStack>
                </div>
            </FluentTab>

            <FluentTab Label="Thresholds">
                <div class="verb-args-tab">
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="16">

                        <LabeledField Label="Minimum score">
                            <FluentNumberField @bind-Value=Params.ThresholdMin Step="0.001" Immediate="true" Size="1" />
                        </LabeledField>

                        <LabeledField Label="Maximum score">
                            <FluentNumberField @bind-Value=Params.ThresholdMax Step="0.001" Immediate="true" Size="1" />
                        </LabeledField>

                        <LabeledField Label="Take top N series">
                            <FluentNumberField @bind-Value=Params.TopSeries Step="1" Min="0" Immediate="true" Size="1" />
                        </LabeledField>

                        <LabeledField Label="Take top N particles in each series">
                            <FluentNumberField @bind-Value=Params.TopPicks Step="1" Min="0" Immediate="true" Size="1" />
                        </LabeledField>

                    </FluentStack>
                </div>
            </FluentTab>

            <AdvancedIOTab @bind-Parameters=Params.AdvancedIOTabParams />

        </FluentTabs>
    </ArgumentsContent>

</VerbBase>

@code {
    [Inject]
    protected NerdyService NerdyService { get; set; }

    readonly SettingsType SettingsType = SettingsType.Undefined;
    readonly string VerbName = "wt_threshold_picks";
    VerbCommand Command = new("WarpTools threshold_picks");

    class CommandParams
    {
        public string Settings { get; set; } = "";

        public string InSuffix { get; set; } = "";
        public string OutSuffix { get; set; } = "";

        public string OutCombined { get; set; } = "";

        public decimal? ThresholdMin { get; set; }
        public decimal? ThresholdMax { get; set; }

        public int? TopSeries { get; set; }
        public int? TopPicks { get; set; }

        public AdvancedIOTabParams AdvancedIOTabParams { get; set; } = new();
    }
    CommandParams Params = new();

    VerbCommand CurrentCommand()
    {
        SettingsService.SaveVerbSettings(VerbName, Params);

        Command.Arguments.Clear();

        if (!string.IsNullOrWhiteSpace(Params.Settings))
            Command.AddArgument($"--settings {Params.Settings}");

        if (!string.IsNullOrWhiteSpace(Params.InSuffix))
            Command.AddArgument($"--in_suffix \"{Params.InSuffix}\"");

        if (!string.IsNullOrWhiteSpace(Params.OutSuffix))
            Command.AddArgument($"--out_suffix \"{Params.OutSuffix}\"");

        if (!string.IsNullOrWhiteSpace(Params.OutCombined))
            Command.AddArgument($"--out_combined \"{Params.OutCombined}\"");

        if (Params.ThresholdMin.HasValue)
            Command.AddArgument($"--minimum {Params.ThresholdMin}");

        if (Params.ThresholdMax.HasValue)
            Command.AddArgument($"--maximum {Params.ThresholdMax}");

        if (Params.TopSeries.HasValue)
            Command.AddArgument($"--top_series {Params.TopSeries}");

        if (Params.TopPicks.HasValue)
            Command.AddArgument($"--top_picks {Params.TopPicks}");

        Params.AdvancedIOTabParams.PopulateArguments(Command);

        return Command;
    }

    string CurrentErrors()
    {
        StringBuilder Errors = new();

        if (string.IsNullOrWhiteSpace(Params.Settings))
            Errors.AppendLine("--settings must have a value");

        if (string.IsNullOrWhiteSpace(Params.InSuffix))
            Errors.AppendLine("--in_suffix must have a value");

        if (string.IsNullOrWhiteSpace(Params.OutSuffix))
            Errors.AppendLine("--out_suffix must have a value");

        if (Params.ThresholdMin.HasValue && Params.ThresholdMax.HasValue && Params.ThresholdMin > Params.ThresholdMax)
            Errors.AppendLine("--minimum must be less than --maximum");

        if (!Params.ThresholdMin.HasValue && !Params.ThresholdMax.HasValue && !Params.TopSeries.HasValue && !Params.TopPicks.HasValue)
            Errors.AppendLine("At least one of --minimum, --maximum, --top_series, or --top_picks must be specified");

        return Errors.ToString();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CommandParams Loaded = SettingsService.LoadVerbSettings<CommandParams>(VerbName);
        if (Loaded != null)
            Params = Loaded;
    }
}
